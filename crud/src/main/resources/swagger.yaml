openapi: 3.0.3
info:
  title: SoA Lab1
  description: вариант 10106 (Лаптев и Сударушкин)
  version: 1.0.0

tags:
  - name: Первый веб-сервис
    description: Dragons and Persons CRUD operations
  - name: Второй веб-сервис
    description: Dragon kill operations

paths:
  /dragons:
    get:
      summary: Get a list of dragons
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
          required: False
      responses:
        '200':
          $ref: '#/components/responses/ListOfDragonsResponse'
        '401':
          description: Inconsistent data

    post:
      summary: Create a new dragon
      tags:
        - Первый веб-сервис
      parameters:
        - name: dragon
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Dragon'

      responses:
        '201':
          description: Dragon created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'
        '401':
          description: Wrong request

  /dragons/{dragon-id}:
    get:
      summary: Get dragon by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'

      responses:
        '200':
          description: A dragon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'
        '404':
          description: Dragon not found

    put:
      summary: Update a dragon by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'
        - name: dragon
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Dragon'

      responses:
        '200':
          description: Dragon updated successfully
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          description: Dragon not found

    delete:
      summary: Delete a dragon by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'
      responses:
        '202':
          description: No dragons to delete
        '204':
          description: Dragon deleted successfully
        '404':
          description: Dragon not found

  /dragons/delete-killed:
    get:
      summary: Delete all objects whose killer field value is equivalent to the specified one.
      tags:
        - Первый веб-сервис
      parameters:
        - name: killer
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Person'
      responses:
        '202':
          description: No dragons to delete
        '204':
          description: All killed Dragon deleted successfully


  /dragons/delete-by-type:
    get:
      summary: Delete one (any) object whose type field value is equivalent to the specified one.
      tags:
        - Первый веб-сервис
      parameters:
        - name: dragonType
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DragonType'
      responses:
        '202':
          description: No dragons with this type
        '204':
          description: One Dragon with this type deleted successfully

  /dragons/get-by-max-color:
    get:
      summary: Return one (any) object whose color field value is the maximum.
      tags:
        - Первый веб-сервис
      responses:
        '200':
          description: A dragon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dragon'
        '401':
          description: Inconsistent data
        '404':
          description: Dragon not found


  /persons:
    post:
      summary: Create a new person
      tags:
        - Первый веб-сервис
      parameters:
        - name: person
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: A person created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '401':
          description: Wrong request data

  /persons/{person-id}:
    get:
      summary: Get person by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'

      responses:
        '200':
          description: A person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found

    put:
      summary: Update person by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'
        - name: person
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Person'

      responses:
        '200':
          description: Person updated successfully
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          description: Person not found

    delete:
      summary: Delete person by ID
      tags:
        - Первый веб-сервис
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'
      responses:
        '204':
          description: Person deleted successfully
        '404':
          description: Person not found

  /teams/create/{team-id}/{team-name}/{team-size}/{start-cave-id}:
    post:
      parameters:
        - in: path
          name: team-id
          schema:
            type: integer
          required: true
          description: Team ID to create.
        - in: path
          name: team-name
          schema:
            type: string
          required: true
          description: Team name.
        - in: path
          name: team-size
          schema:
            type: integer
          required: true
          description: Team size.
        - in: path
          name: start-cave-id
          schema:
            type: integer
          required: true
          description: Cave ID, where team will be created.
      tags:
        - Второй веб-сервис
      summary: Create a team
      description: Create a team
      responses:
        '202':
          description: No dragons for kill
        '204':
          description: Killed.
        '401':
          description: Wrong request data
        '404':
          description: Not found team

  /team/{team-id}/move-to-cave/{cave-id}:
    post:
      parameters:
        - in: path
          name: team-id
          schema:
            type: integer
          required: true
          description: Team ID to send.
        - in: path
          name: cave-id
          schema:
            type: integer
          required: true
          description: Cave ID to send.
      tags:
        - Второй веб-сервис
      summary: Send a team of dragon slayers to the specified cave
      description: Send a team of dragon slayers to the specified cave
      responses:
        '204':
          description: A team of dragon slayers has been sent to the specified cave.
        '401':
          description: Inconsistent data
        '404':
          description: Not found team or cave

components:

  responses:
    ListOfDragonsResponse:
      description: A list of dragons
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dragon'
            xml:
              name: Results

    ErrorResponse:
      description: An error
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              xml:
                name: Error
            xml:
              name: Results


  parameters:
    FilterParam:
      name: filter
      in: query
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - value
          properties:
            field:
              type: string
              example: name
            value:
              type: string
              example: andrey

    SortParam:
      name: sort
      in: query
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              example: name
            order:
              type: string
              enum:
                - asc
                - desc

    DragonIdParam:
      name: dragonId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

    PersonIdParam:
      name: personId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:

    Dragon:
      type: object
      required:
        - name
        - coordinates
      properties:
        id:
          type: integer
          minimum: 1
          readOnly: true
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: datetime
          readOnly: true
        age:
          type: integer
          minimum: 1
        color:
          $ref: '#/components/schemas/Color'
        character:
          $ref: '#/components/schemas/DragonCharacter'
        type:
          $ref: '#/components/schemas/DragonType'
        killer:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Person'

    Coordinates:
      type: object
      required:
        - x
      properties:
        x:
          type: string
          format: float
        y:
          type: string
          format: float
          minimum: -796

    Color:
      type: string
      enum:
        - ORANGE
        - WHITE
        - BROWN

    DragonCharacter:
      type: string
      enum:
        - WISE
        - CHAOTIC,
        - CHAOTIC_EVIL
        - FICKLE

    DragonType:
      type: string
      enum:
        - WATER
        - UNDERGROUND
        - AIR
        - FIRE

    Person:
      type: object
      required:
        - height
        - hairColor
      properties:
        name:
          type: string
          minLength: 1
        birthday:
          type: string
          format: date
        height:
          type: integer
          minimum: 1
        passportID:
          type: string
        hairColor:
          $ref: '#/components/schemas/Color'